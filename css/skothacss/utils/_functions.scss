// Map Functions

/*From Hugo Giraudel's 'Extra Map Functions in Sass'
* Link: https://www.sitepoint.com/extra-map-functions-sass/
*/
/// Fetch nested keys
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}

@function map-deep-get($map, $keys…) {
    $value: $map;
    @each $key in $keys {
        $value: map-get($value, $key);
    }
    @return $value;
}

/// Update a key deeply nested
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function map-deep-set($map, $keys… /*, $value */) {
    $map-list: ($map);
    $result: null;
    @if length($keys) == 2 {
        @return map-merge(
            $map,
            (
                nth($keys, 1): nth($keys, -1)
            )
        );
    }

    @for $i from 1 through length($keys) - 2 {
        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
    }
    @for $i from length($map-list) through 1 {
        $result: map-merge(
            nth($map-list, $i),
            (
                nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)
            )
        );
    }
    @return $result;
}

// Colors
/* Mix to apply effext on entire palette */
@each $colors in map-keys(map-get($palette, colors)) {
    $palette: map-deep-set(
        $palette,
        “colors”,
        $colors,
        mix(
            map-deep-get($palette, “colors”, $colors),
            map-deep-get($palette, ”mix”, ”color”),
            map-deep-get($palette, ”mix”, ”keep”)
        )
    );
}

/* Helper function to look up colors from $skothaPalette map*/

@function color($name, $is_imp: false) {
    @if map-has-key($skothaPalette, $name) {
        $c: map-get($skothaPalette, $name);
        @if $is_imp == false {
            @return $c;
        } @else {
            @return $c !important;
        }
    }

    @warn “Unknown #{$name} in palette”;
    @return null;
}

/* loop through primary colors in palette */
@each $colors in map-keys(map-get($palette, colors)) {
    $vc: map-deep-get($palette, “colors”, $colors);
    /* generate a class for the main color (no specific tone or alpha applied) */
    .#{$color-class-prefix}#{$colors} {
        background-color: $vc !important;
    }

    /* generate a variable in the color map for the main color (no specific tone or alpha applied) */
    $skothaPalette: map-merge($skothaPalette, (#{$colors}: $vc));

    /* loop through tones */
    @each $tones in map-keys(map-get($palette, tones)) {
        /* for the primary colors, generate a class and variable for each tone variation */
        .#{$color-class-prefix}#{$colors}-#{$tones} {
            /* darken or lighten the primary color based on the tone value being positive or negative */
            @if map-deep-get($palette, “tones”, $tones) > 0 {
                $vc: darken(
                    map-deep-get($palette, “colors”, $colors),
                    map-deep-get($palette, “tones”, $tones)
                );
                background-color: $vc !important;
                $skothaPalette: map-merge($skothaPalette, (#{$colors}_#{$tones}: $vc));
            } @else {
                $vc: lighten(
                    map-deep-get($palette, “colors”, $colors),
                    abs(map-deep-get($palette, “tones”, $tones))
                );
                background-color: $vc !important;
                $skothaPalette: map-merge($skothaPalette, (#{$colors}_#{$tones}: $vc));
            }
        }

        /* for each tone of a primary color, loop through the alpha variations */
        @each $alpha in map-keys(map-get($palette, alpha)) {
            /* generate an alpha variation class and variable for each alpha variation of a tone variation of a primary color */
            .#{$class-prefix}#{$colors}-#{$tones}-#{$alpha} {
                /* generate the class. first we darken or lighten the tone of the color, then we deassemble the color into 
                /* rgb channels so that we can set the alpha channel using rgba */
                @if map-deep-get($palette, “tones”, $tones) > 0 {
                    $vc: rgba(
                        red(
                            darken(
                                map-deep-get($palette, “colors”, $colors),
                                map-deep-get($palette, “tones”, $tones)
                            )
                        ),
                        green(
                            darken(
                                map-deep-get($palette, “colors”, $colors),
                                map-deep-get($palette, “tones”, $tones)
                            )
                        ),
                        blue(
                            darken(
                                map-deep-get($palette, “colors”, $colors),
                                map-deep-get($palette, “tones”, $tones)
                            )
                        ),
                        map-deep-get($palette, “alpha”, $alpha)
                    );

                    background-color: $vc !important;
                    $skothaPalette: map-merge($skothaPalette, (#{$colors}_#{$tones}_#{$alpha}: $vc));
                } @else {
                    $vc: rgba(
                        red(
                            lighten(
                                map-deep-get($palette, “colors”, $colors),
                                abs(map-deep-get($palette, “tones”, $tones))
                            )
                        ),
                        green(
                            lighten(
                                map-deep-get($palette, “colors”, $colors),
                                abs(map-deep-get($palette, “tones”, $tones))
                            )
                        ),
                        blue(
                            lighten(
                                map-deep-get($palette, “colors”, $colors),
                                abs(map-deep-get($palette, “tones”, $tones))
                            )
                        ),
                        map-deep-get($palette, “alpha”, $alpha)
                    );

                    background-color: $vc !important;
                    $skothaPalette: map-merge($skothaPalette, (#{$colors}_#{$tones}_#{$alpha}: $vc));
                }
            }
        }
    }
}

// If $palette_debug is true (see _vatiables) outpu the names and values of all generated colors
@if $palette_debug {
    @each $color in $skothaPalette {
    @debug $color;
    }
}